@page "/newspage"
@using System.Net.Http.Json
@inject HttpClient Http
@using NewsInsight.Shared.Models.DTOs
@inject NavigationManager NavigationManager
@implements IDisposable

<h3 class="page-title">新闻管理</h3>

<button class="back-button" @onclick="GoBackToHomePage">返回主页</button>

<div class="news-container">
    <div class="filters">
        <!-- 类别输入框 -->
        <div class="filter-group">
            <label>类别：</label>
            <div class="input-with-suggestions">
            <input type="text" @bind="categoryInput" @oninput="HandleCategoryInput" placeholder="输入类别（如：sports）"
                @onfocus="ShowCategorySuggestions" @onblur="HideCategorySuggestions" />

            @if (showCategorySuggestions && matchedCategories.Any())
            {
                <div class="suggestion-box">
                    @foreach (var cat in matchedCategories)
                    {
                            <div class="suggestion-item" @onclick="() => SelectCategory(cat)">
                                @cat
                            </div>
                    }
                </div>
            }
            </div>
        </div>

        <!-- 主题输入框 -->
        <div class="filter-group">
            <label>主题：</label>
            <div class="input-with-suggestions">
            <input type="text" @bind="topicInput" @oninput="HandleTopicInput" placeholder="输入主题（如：basketball）"
                @onfocus="ShowTopicSuggestions" @onblur="HideTopicSuggestions" />

            @if (showTopicSuggestions && matchedTopics.Any())
            {
                <div class="suggestion-box">
                    @foreach (var topic in matchedTopics)
                    {
                            <div class="suggestion-item" @onclick="() => SelectTopic(topic)">
                                @topic
                            </div>
                    }
                </div>
            }
            </div>
        </div>

        <div class="filter-group">
            <label>关键词：</label>
            <input type="text" @bind="keyword" placeholder="搜索标题或内容" />
        </div>

        <div class="filter-group">
            <label>排序依据：</label>
            <select @bind="sortBy">
                <option value="released">发布时间</option>
                <option value="popularity">浏览数</option>
            </select>
        </div>

        <div class="filter-group">
            <label>降序：</label>
            <input type="checkbox" @bind="sortDesc" />
        </div>

        <div class="filter-group">
            <button class="apply-button" @onclick="ApplyFilters">应用筛选</button>
            <button class="clear-button" @onclick="ClearFilters">清除筛选</button>
        </div>
    </div>

    <div class="news-list">
        <h4>新闻列表 (第 @pageNumber 页 / 共 @totalPages 页)</h4>

        @if (isLoading)
        {
            <p class="loading-indicator">正在加载新闻...</p>
        }
        else if (newsList == null || !newsList.Any())
        {
            <p class="no-results">没有找到新闻。请尝试不同的筛选条件。</p>
        }
        else
        {
            <table class="news-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>标题</th>
                        <th>类别</th>
                        <th>主题</th>
                        <th>发布时间</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var newsItem in newsList)
                    {
                        <tr>
                            <td>
                                <button class="id-link" @onclick="() => ShowNewsDetail(newsItem.Id)">
                                    @newsItem.Id
                                </button>
                            </td>
                            <td>@newsItem.Headline</td>
                            <td>@newsItem.Category</td>
                            <td>@newsItem.Topic</td>
                            <td>@newsItem.ReleasedTime.ToString("yyyy-MM-dd HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <div class="pagination">
            <button class="pagination-button" @onclick="PreviousPage" disabled="@(!CanGoBack || isLoading)">上一页</button>
            <span>第 @pageNumber 页 / 共 @totalPages 页</span>
            <button class="pagination-button" @onclick="NextPage" disabled="@(!CanGoNext || isLoading)">下一页</button>
        </div>
    </div>
</div>

@if (showDetailModal)
{
    <div class="modal-overlay" @onclick="CloseDetailModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h4>@selectedNews?.Headline</h4>
                <button class="close-button" @onclick="CloseDetailModal">&times;</button>
            </div>

            <div class="modal-body">
                @if (isDetailsLoading)
                {
                    <p class="loading-indicator">正在加载新闻详情...</p>
                }
                else if (selectedNews != null)
                {
                    <div class="news-detail-card">
                        <div class="detail-row">
                            <span class="label">ID:</span>
                            <span>@selectedNews.Id</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">类别:</span>
                            <span>@selectedNews.Category</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">主题:</span>
                            <span>@selectedNews.Topic</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">发布时间:</span>
                            <span>@selectedNews.ReleasedTime.ToString("yyyy-MM-dd HH:mm")</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">浏览数:</span>
                            <span>@selectedNews.BrowseCount</span>
                        </div>
                        <div class="content-section">
                            <h5>内容:</h5>
                            <p>@selectedNews.Content</p>
                        </div>
                    </div>
                }
                else if (hasSearched)
                {
                    <p class="no-results">无法加载新闻详情。</p>
                }
            </div>

            <div class="modal-footer">
                <button class="modal-button" @onclick="CloseDetailModal">关闭</button>
            </div>
        </div>
    </div>
}

@code {
    // 状态变量
    private string? category;
    private string? topic;
    private string? keyword;
    private string sortBy = "released";
    private bool sortDesc = true;
    private int pageNumber = 1;
    private int totalPages = 1;
    private const int pageSize = 10;

    // 加载状态
    private bool isLoading = false;
    private bool isDetailsLoading = false;
    private bool hasSearched = false;

    // 新闻数据
    private List<NewsDto> newsList = new List<NewsDto>();
    private NewsDto? selectedNews;
    private bool showDetailModal = false;

    // 分页控制
    private bool CanGoBack => pageNumber > 1;
    private bool CanGoNext => pageNumber < totalPages;

    // 类别建议相关
    private string categoryInput = string.Empty;
    private List<string> matchedCategories = new();
    private bool showCategorySuggestions = false;
    private bool isCategorySelected = false;

    // 主题建议相关
    private string topicInput = string.Empty;
    private List<string> matchedTopics = new();
    private bool showTopicSuggestions = false;
    private bool isTopicSelected = false;

    // 防抖计时器
    private System.Timers.Timer? suggestionTimer;

    protected override async Task OnInitializedAsync()
    {
        suggestionTimer = new System.Timers.Timer(300);
        suggestionTimer.AutoReset = false;
        suggestionTimer.Elapsed += async (sender, e) =>
        {
            // 获取类别建议
            if (!string.IsNullOrWhiteSpace(categoryInput) && !isCategorySelected)
            {
                await FetchCategorySuggestions();
            }

            // 获取主题建议
            if (!string.IsNullOrWhiteSpace(topicInput) && !isTopicSelected)
            {
                await FetchTopicSuggestions();
            }

            await InvokeAsync(StateHasChanged);
        };

        // 初始加载新闻
        await ApplyFilters();
    }

    public void Dispose()
    {
        suggestionTimer?.Dispose();
    }

    // ===== 新闻列表相关方法 =====
    private async Task FetchNews()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var queryParams = new Dictionary<string, string?>
{
{ "category", category },
{ "topic", topic },
{ "keyword", keyword },
{ "sortBy", sortBy },
{ "sortDesc", sortDesc.ToString() },
{ "page", pageNumber.ToString() },
{ "pageSize", pageSize.ToString() }
};

            // 构建有效查询参数
            var validParams = queryParams
            .Where(p => !string.IsNullOrEmpty(p.Value))
            .ToDictionary(p => p.Key, p => p.Value);

            // 发送请求
            var response = await Http.GetFromJsonAsync<PaginatedResponse<NewsDto>>(
            $"api/news?{await new FormUrlEncodedContent(validParams).ReadAsStringAsync()}");

            if (response != null)
            {
                newsList = response.Items;
                totalPages = (int)Math.Ceiling(response.TotalCount / (double)pageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载新闻出错: {ex.Message}");
            newsList = new List<NewsDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoBack)
        {
            pageNumber--;
            await FetchNews();
        }
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            pageNumber++;
            await FetchNews();
        }
    }

    // ===== 筛选相关方法 =====
    private async Task ApplyFilters()
    {
        // 将输入框的值同步到筛选条件
        category = string.IsNullOrWhiteSpace(categoryInput) ? null : categoryInput;
        topic = string.IsNullOrWhiteSpace(topicInput) ? null : topicInput;

        pageNumber = 1; // 重置到第一页
        await FetchNews();
    }

    private async Task ClearFilters()
    {
        // 重置类别
        category = null;
        categoryInput = string.Empty;
        isCategorySelected = false;
        showCategorySuggestions = false;
        matchedCategories.Clear();

        // 重置主题
        topic = null;
        topicInput = string.Empty;
        isTopicSelected = false;
        showTopicSuggestions = false;
        matchedTopics.Clear();

        // 重置其他筛选条件
        keyword = null;
        sortBy = "released";
        sortDesc = true;

        // 重新加载数据
        pageNumber = 1;
        await FetchNews();
    }

    // ===== 类别建议相关方法 =====
    private void HandleCategoryInput(ChangeEventArgs e)
    {
        categoryInput = e.Value?.ToString() ?? string.Empty;
        isCategorySelected = false;
        suggestionTimer?.Stop();
        suggestionTimer?.Start();
    }

    private void ShowCategorySuggestions()
    {
        showCategorySuggestions = true;
        if (!string.IsNullOrWhiteSpace(categoryInput))
        {
            _ = FetchCategorySuggestions();
        }
    }
    private async void HideCategorySuggestions()
    {
        await Task.Delay(200);
        if (!isCategorySelected)
        {
            showCategorySuggestions = false;
            StateHasChanged();
        }
    }

    private async Task FetchCategorySuggestions()
    {
        if (string.IsNullOrWhiteSpace(categoryInput) || isCategorySelected)
        {
            matchedCategories.Clear();
            return;
        }

        try
        {
            var prefix = categoryInput.Trim();
            var response = await Http.GetAsync(
            $"api/news/categories/match?prefix={Uri.EscapeDataString(prefix)}");

            if (response.IsSuccessStatusCode)
            {
                matchedCategories = await response.Content.ReadFromJsonAsync<List<string>>()
                ?? new List<string>();
            }
            else
            {
                matchedCategories = new List<string>();
            }

            showCategorySuggestions = matchedCategories.Any();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"获取类别建议失败: {ex.Message}");
            matchedCategories = new List<string>();
            showCategorySuggestions = false;
        }
    }

    private void SelectCategory(string selectedCategory)
    {
        categoryInput = selectedCategory;
        isCategorySelected = true;
        showCategorySuggestions = false;
        // 不再自动应用筛选，等待用户点击"应用筛选"按钮
    }

    // ===== 主题建议相关方法 =====
    private void HandleTopicInput(ChangeEventArgs e)
    {
        topicInput = e.Value?.ToString() ?? string.Empty;
        isTopicSelected = false;
        suggestionTimer?.Stop();
        suggestionTimer?.Start();
    }

    private void ShowTopicSuggestions()
    {
        showTopicSuggestions = true;
        if (!string.IsNullOrWhiteSpace(topicInput))
        {
            _ = FetchTopicSuggestions();
        }
    }

    private async void HideTopicSuggestions()
    {
        await Task.Delay(200);
        if (!isTopicSelected)
        {
            showTopicSuggestions = false;
            StateHasChanged();
        }
    }

    private async Task FetchTopicSuggestions()
    {
        if (string.IsNullOrWhiteSpace(topicInput) || isTopicSelected)
        {
            matchedTopics.Clear();
            return;
        }

        try
        {
            var prefix = topicInput.Trim();
            var response = await Http.GetAsync(
            $"api/news/topics/match?prefix={Uri.EscapeDataString(prefix)}");

            if (response.IsSuccessStatusCode)
            {
                matchedTopics = await response.Content.ReadFromJsonAsync<List<string>>()
                ?? new List<string>();
            }
            else
            {
                matchedTopics = new List<string>();
            }

            showTopicSuggestions = matchedTopics.Any();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"获取主题建议失败: {ex.Message}");
            matchedTopics = new List<string>();
            showTopicSuggestions = false;
        }
    }

    private void SelectTopic(string selectedTopic)
    {
        topicInput = selectedTopic;
        isTopicSelected = true;
        showTopicSuggestions = false;
        // 不再自动应用筛选，等待用户点击"应用筛选"按钮
    }
    
    // ===== 新闻详情相关方法 =====
    private async Task ShowNewsDetail(int id)
    {
        showDetailModal = true;
        isDetailsLoading = true;
        hasSearched = true;
        StateHasChanged();

        try
        {
            selectedNews = await Http.GetFromJsonAsync<NewsDto>($"api/news/{id}");
        }
        catch
        {
            selectedNews = null;
        }
        finally
        {
            isDetailsLoading = false;
        }
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedNews = null;
    }

    // ===== 导航方法 =====
    private void GoBackToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }
}