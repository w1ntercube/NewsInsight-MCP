@page "/newspage"
@using System.Net.Http.Json
@inject HttpClient Http
@using NewsInsight.Shared.Models.DTOs
@inject NavigationManager NavigationManager
@implements IDisposable

<h3 class="page-title">新闻管理</h3>

<button class="back-button" @onclick="GoBackToHomePage">返回主页</button>

<div class="tab-group">
    <button class="@(activeTab == "browse" ? "active" : "")" @onclick="@(() => SwitchTab("browse"))">
        浏览新闻
    </button>
    <button class="@(activeTab == "details" ? "active" : "")" @onclick="@(() => SwitchTab("details"))">
        查看新闻详情
    </button>
</div>

@if (activeTab == "browse")
{
    <div class="news-browse">
        <div class="filters">
            <div class="filter-group">
                <label>类别：</label>
                <input type="text" @bind="categoryInput" @oninput="HandleCategoryInput" placeholder="输入类别（如：sports）"
                    @onfocus="ShowCategorySuggestions" @onblur="HideCategorySuggestions" />

                @if (showCategorySuggestions && matchedCategories.Any())
                {
                    <div class="suggestion-box">
                        @foreach (var cat in matchedCategories)
                        {
                            <div class="suggestion-item" @onclick="() => SelectCategory(cat)"
                                @onmouseover="() => SetHoverCategory(cat)" @onmouseout="() => SetHoverCategory(null)">
                                @cat
                            </div>
                        }
                    </div>
                }
            </div>

            <div class="filter-group">
                <label>关键词：</label>
                <input type="text" @bind="keyword" placeholder="搜索标题或内容" />
            </div>

            <div class="filter-group">
                <label>排序依据：</label>
                <select @bind="sortBy">
                    <option value="released">发布时间</option>
                </select>
            </div>

            <div class="filter-group">
                <label>降序：</label>
                <input type="checkbox" @bind="sortDesc" />
            </div>

            <div class="filter-group">
                <button class="apply-button" @onclick="ApplyFilters">应用筛选</button>
            </div>
        </div>

        <div class="news-list">
            <h4>新闻列表 (第 @pageNumber 页 / 共 @totalPages 页)</h4>

            @if (isLoading)
            {
                <p>正在加载新闻...</p>
            }
            else if (newsList == null || !newsList.Any())
            {
                <p>没有找到新闻。请尝试不同的筛选条件。</p>
            }
            else
            {
                <table class="news-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>标题</th>
                            <th>类别</th>
                            <th>话题</th>
                            <th>发布时间</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var newsItem in newsList)
                        {
                            <tr>
                                <td>@newsItem.Id</td>
                                <td>@newsItem.Headline</td>
                                <td>@newsItem.Category</td>
                                <td>@newsItem.Topic</td>
                                <td>@newsItem.ReleasedTime.ToString("yyyy-MM-dd HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div class="pagination">
                <button class="pagination-button" @onclick="PreviousPage" disabled="@(!CanGoBack || isLoading)">上一页</button>
                <span>第 @pageNumber 页 / 共 @totalPages 页</span>
                <button class="pagination-button" @onclick="NextPage" disabled="@(!CanGoNext || isLoading)">下一页</button>
            </div>
        </div>
    </div>
}
else if (activeTab == "details")
{
    <div class="news-details">
        <div class="id-search">
            <label>输入新闻ID：</label>
            <input type="number" @bind="searchId" />
            <button class="search-button" @onclick="GetNewsDetails">搜索</button>
        </div>

        @if (isDetailsLoading)
        {
            <p>正在加载新闻详情...</p>
        }
        else if (selectedNews != null)
        {
            <div class="news-detail-card">
                <h4>@selectedNews.Headline</h4>
                <div class="detail-row">
                    <span class="label">ID:</span>
                    <span>@selectedNews.Id</span>
                </div>
                <div class="detail-row">
                    <span class="label">类别:</span>
                    <span>@selectedNews.Category</span>
                </div>
                <div class="detail-row">
                    <span class="label">话题:</span>
                    <span>@selectedNews.Topic</span>
                </div>
                <div class="detail-row">
                    <span class="label">发布时间:</span>
                    <span>@selectedNews.ReleasedTime.ToString("yyyy-MM-dd HH:mm")</span>
                </div>
                <div class="content-section">
                    <h5>内容:</h5>
                    <p>@selectedNews.Content</p>
                </div>
            </div>
        }
        else if (hasSearched)
        {
            <p>没有找到ID为 @searchId 的新闻。</p>
        }
    </div>
}

@code {
    private string activeTab = "browse";
    private string? category;
    private string? keyword;
    private string sortBy = "released";
    private bool sortDesc = true;
    private int pageNumber = 1;
    private int totalPages = 1;
    private const int pageSize = 10;

    // Loading states
    private bool isLoading = false;
    private bool isDetailsLoading = false;

    private List<NewsDto> newsList = new List<NewsDto>();
    private int? searchId;
    private NewsDto? selectedNews;
    private bool hasSearched = false;

    // Pagination control
    private bool CanGoBack => pageNumber > 1;
    private bool CanGoNext => pageNumber < totalPages;

    // Category suggestions
    private string categoryInput = string.Empty;
    private List<string> matchedCategories = new();
    private bool showCategorySuggestions = false;
    private string? hoverCategory = null;
    private System.Timers.Timer? suggestionTimer;
    private bool isCategorySelected = false;

    protected override void OnInitialized()
    {
        suggestionTimer = new System.Timers.Timer(300);
        suggestionTimer.AutoReset = false;
        suggestionTimer.Elapsed += async (sender, e) =>
        {
            await FetchCategorySuggestions();
            await InvokeAsync(StateHasChanged);
        };
    }

    public void Dispose()
    {
        suggestionTimer?.Dispose();
    }

    private async Task ApplyFilters()
    {
        pageNumber = 1;
        await FetchNews();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchNews();
    }

    private async Task FetchNews()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var queryParams = new Dictionary<string, string?>
{
{ "category", category },
{ "keyword", keyword },
{ "sortBy", sortBy },
{ "sortDesc", sortDesc.ToString() },
{ "page", pageNumber.ToString() },
{ "pageSize", pageSize.ToString() }
};

            // 移除空参数
            var validParams = queryParams
            .Where(p => !string.IsNullOrEmpty(p.Value))
            .ToDictionary(p => p.Key, p => p.Value);

            var response = await Http.GetFromJsonAsync<PaginatedResponse<NewsDto>>(
            $"api/news?{await new FormUrlEncodedContent(validParams).ReadAsStringAsync()}");

            if (response != null)
            {
                newsList = response.Items;
                totalPages = (int)Math.Ceiling(response.TotalCount / (double)pageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载新闻出错: {ex.Message}");
            newsList = new List<NewsDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetNewsDetails()
    {
        hasSearched = true;
        if (searchId == null || searchId <= 0)
        {
            selectedNews = null;
            return;
        }

        try
        {
            isDetailsLoading = true;
            StateHasChanged();

            selectedNews = await Http.GetFromJsonAsync<NewsDto>($"api/news/{searchId}");
        }
        catch
        {
            selectedNews = null;
        }
        finally
        {
            isDetailsLoading = false;
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoBack)
        {
            pageNumber--;
            await FetchNews();
        }
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            pageNumber++;
            await FetchNews();
        }
    }

    private async void SwitchTab(string tabName)
    {
        activeTab = tabName;
        if (tabName == "browse")
        {
            selectedNews = null;
            hasSearched = false;
            pageNumber = 1;
            await FetchNews();
        }
    }

    private void GoBackToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleCategoryInput(ChangeEventArgs e)
    {
        categoryInput = e.Value?.ToString() ?? string.Empty;
        isCategorySelected = false;

        // 重置并启动防抖计时器
        suggestionTimer?.Stop();
        suggestionTimer?.Start();
    }

    private void ShowCategorySuggestions()
    {
        showCategorySuggestions = true;
        // 立即获取当前输入的建议
        if (!string.IsNullOrWhiteSpace(categoryInput))
        {
            _ = FetchCategorySuggestions();
        }
    }
    
    private async void HideCategorySuggestions()
    {
        // 短暂延迟以允许点击事件处理
        await Task.Delay(200);
        if (!isCategorySelected)
        {
            showCategorySuggestions = false;
            StateHasChanged();
        }
    }

    private async Task FetchCategorySuggestions()
    {
        if (string.IsNullOrWhiteSpace(categoryInput) || isCategorySelected)
        {
            matchedCategories.Clear();
            return;
        }

        try
        {
            // 使用当前输入值获取建议
            var prefix = categoryInput.Trim();
            var response = await Http.GetAsync(
            $"api/news/categories/match?prefix={Uri.EscapeDataString(prefix)}");

            if (response.IsSuccessStatusCode)
            {
                matchedCategories = await response.Content.ReadFromJsonAsync<List<string>>()
                ?? new List<string>();
            }
            else
            {
                matchedCategories = new List<string>();
            }

            // 只有在有匹配结果时才显示建议框
            showCategorySuggestions = matchedCategories.Any();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"获取类别建议失败: {ex.Message}");
            matchedCategories = new List<string>();
            showCategorySuggestions = false;
        }
    }

    private void SetHoverCategory(string? category)
    {
        hoverCategory = category;
    }


    private async Task SelectCategory(string category)
    {
        // 更新输入框和筛选条件
        this.category = category;
        categoryInput = category;
        isCategorySelected = true;
        showCategorySuggestions = false;

        // 立即应用筛选
        await ApplyFilters();
    }
}