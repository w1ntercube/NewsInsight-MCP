@page "/categoryheatmap"
@using System.Net.Http.Json
@inject HttpClient Http
@using NewsInsight.Shared.Models.DTOs
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="page-title">类别热度分析</h3>

<button class="back-button" @onclick="GoBackToHomePage">返回主页</button>

<!-- 筛选控件 -->
<div class="filters">
    <div class="filter-group">
        <label>类别：</label>
        <input type="text" @bind="categoriesInput" placeholder="请输入类别，用逗号分隔" />
    </div>

    <div class="filter-group">
        <label>开始日期：</label>
        <input type="date" @bind="startDate" />
    </div>

    <div class="filter-group">
        <label>结束日期：</label>
        <input type="date" @bind="endDate" />
    </div>

    <div class="filter-group">
        <button class="apply-button" @onclick="FetchCategoryHeatmap">获取热度图</button>
    </div>
</div>

<!-- 图表容器 -->
<div class="chart-container compact">
    <div class="chart-controls">
        <label>图表类型：</label>
        <select @bind="chartType">
            <option value="line">折线图</option>
            <option value="bar">柱状图</option>
        </select>

        <label>数据指标：</label>
        <select @bind="dataMetric">
            <option value="browseCount">浏览次数</option>
            <option value="browseDuration">浏览时长</option>
        </select>

        <button class="toggle-button" @onclick="ToggleDataTable">@(showDataTable ? "隐藏数据表格" : "显示数据表格")</button>
    </div>

    <!-- 图表容器 -->
    <div class="chart-wrapper">
        <canvas id="heatmapChart" class="heatmap-chart compact"></canvas>
    </div>
</div>

<!-- 数据表格 -->
@if (showDataTable && heatmapData != null && heatmapData.Any())
{
    <div class="data-table-container">
        <h4>从 @startDate.ToString("yyyy-MM-dd") 到 @endDate.ToString("yyyy-MM-dd") 的类别热度数据</h4>

        <table class="data-table">
            <thead>
                <tr>
                    <th>日期</th>
                    <th>类别</th>
                    <th>浏览次数</th>
                    <th>浏览时长</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var day in heatmapData)
                {
                    @foreach (var category in day.Categories)
                    {
                        <tr>
                            <td>@day.Date.ToString("yyyy-MM-dd")</td>
                            <td>@category.Category</td>
                            <td>@category.BrowseCount.ToString("N0")</td>
                            <td>@FormatDuration(category.BrowseDuration)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="loading-spinner"></div>
        <p>正在加载数据...</p>
    </div>
}

@code {
    private string categoriesInput = "entertainment"; // 默认类别
    private DateTime startDate = new DateTime(2019, 6, 13); // 默认开始日期
    private DateTime endDate = new DateTime(2019, 6, 30); // 默认结束日期
    private List<CategoryHeatmapDayDto> heatmapData = new List<CategoryHeatmapDayDto>();
    private bool isLoading = false;
    private bool showDataTable = false;
    private string chartType = "line";
    private string dataMetric = "browseCount";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // 直接调用全局函数
                await JSRuntime.InvokeVoidAsync("initializeHeatmapChart");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"初始化图表时出错: {ex.Message}");
            }
        }
    }
    
    // 格式化浏览时长
    private string FormatDuration(int seconds)
    {
        if (seconds < 60) return $"{seconds}秒";
        
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        
        if (minutes < 60) return $"{minutes}分{remainingSeconds}秒";
        
        int hours = minutes / 60;
        int remainingMinutes = minutes % 60;
        
        return $"{hours}小时{remainingMinutes}分{remainingSeconds}秒";
    }
    
    // 获取类别热度图数据
    private async Task FetchCategoryHeatmap()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // 解析输入的类别
            var categories = categoriesInput.Split(',').Select(c => c.Trim()).ToList();

            var queryParams = new Dictionary<string, string?>
            {
                { "categories", string.Join(",", categories) },
                { "startDate", startDate.ToString("yyyy-MM-dd") },
                { "endDate", endDate.ToString("yyyy-MM-dd") }
            };

            var response = await Http.GetFromJsonAsync<CategoryHeatmapDto>(
                $"http://localhost:5137/api/newscategory/category-heatmap?{await new FormUrlEncodedContent(queryParams).ReadAsStringAsync()}");

            if (response != null)
            {
                heatmapData = response.HeatmapData;
                await UpdateChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载热度数据出错: {ex.Message}");
            heatmapData = new List<CategoryHeatmapDayDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    // 更新图表
    private async Task UpdateChart()
    {
        if (heatmapData != null && heatmapData.Any())
        {
            // 准备时间轴数据 - 使用 Date 对象
            var timeAxis = heatmapData.Select(d => d.Date).ToList();
            
            // 获取所有类别
            var categories = heatmapData
                .SelectMany(d => d.Categories)
                .Select(c => c.Category)
                .Distinct()
                .ToList();
            
            var datasets = new List<object>();
            
            foreach (var category in categories)
            {
                var data = new List<object>();
                
                foreach (var day in heatmapData)
                {
                    var categoryData = day.Categories.FirstOrDefault(c => c.Category == category);
                    
                    if (categoryData != null)
                    {
                        if (dataMetric == "browseCount")
                        {
                            data.Add(categoryData.BrowseCount);
                        }
                        else
                        {
                            // 转换为小时
                            data.Add(Math.Round(categoryData.BrowseDuration / 3600.0, 1));
                        }
                    }
                    else
                    {
                        data.Add(0);
                    }
                }
                
                // 生成随机颜色
                var color = $"#{Random.Shared.Next(0x1000000):X6}";
                
                datasets.Add(new {
                    label = category,
                    data = data,
                    borderColor = color,
                    backgroundColor = $"{color}33",
                    tension = 0.4,
                    fill = false
                });
            }
            
            // 计算时间跨度（天数）
            var timeSpanDays = (endDate - startDate).Days;
            
            // 根据时间跨度确定时间单位
            var timeUnit = timeSpanDays > 60 ? "month" : 
                          timeSpanDays > 30 ? "week" : 
                          timeSpanDays > 14 ? "day" : 
                          "day";
            
            try
            {
                // 调用JavaScript更新图表
                await JSRuntime.InvokeVoidAsync("updateHeatmapChart", chartType, timeAxis, datasets, 
                    dataMetric == "browseCount" ? "浏览次数" : "浏览时长 (小时)",
                    timeUnit);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"更新图表时出错: {ex.Message}");
            }
        }
    }
    
    // 切换数据表格显示
    private void ToggleDataTable()
    {
        showDataTable = !showDataTable;
    }
    
    // 返回主页
    private void GoBackToHomePage()
    {
        NavigationManager.NavigateTo("/"); 
    }
}